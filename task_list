PICKED TASKS

* build functions
  * get_jsonb_string_node -> cloned dstring
  * get_jsonb_materialized_numeric_node -> cloned materialized_numeric
  * get_jsonb_object_node -> new jsonb object node
  * get_jsonb_array_node -> new jsonb array node with fixed capacity
* build function to delete jsonb_node
* build functions to clone jsonb_node
* build function to parse jsonb using binary_reader_interface
* build function to write jsonb over to a binary_write_iterator, using a helper function
* build function to skip the binary_reader_interface to a specific to a specific json_accessor

* JSONB
  * first byte says type
    0 -> NULL
    1 -> true
    2 -> false
    3 -> string -> 4 byte size (>= 4), and then the bytes
    4 -> numeric -> 4 byte size (always 4 + 4*Ndigits + 3), 1 byte sign bits, 2 bytes exponent, then digits
    5 -> json array -> 4 byte size (>= 8), 4 byte element count, then elements
    6 -> json object -> 4 byte size (>= 8), 4 byte element count (always a multiple of 2, key then values), then keys and values alternatively, keys are always strings and ordered lexicographically
  * allows opening a binary_read_iterator on it using a json_accessor (from JSONparser library), which is first sorted and then elements with are prefixes to some other json_accessor, then some other are eliminated
   * we will allow partial parsing
   * function to check if the current object being pointed to is of what type using the first byte
   * generates text_reader_interface and numeric_reader_interface on text and numeric types
   * allows materializing the current object being pointer to into a json_node
   * json_node then allows equality, contains, union, intersection and difference
  * build jsonb_node from json_node and viceversa
  * add hasher to hash some attribute nestedly

(*future)
materialized_numeric
  * write a complete briefcase of functions to perform add, sub, multiplication and division